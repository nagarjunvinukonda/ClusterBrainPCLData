// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pointcloud.proto

#include "pointcloud.pb.h"
#include "pointcloud.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pointcloud {

static const char* NLPointCloudService_method_names[] = {
  "/pointcloud.NLPointCloudService/Cluster",
};

std::unique_ptr< NLPointCloudService::Stub> NLPointCloudService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NLPointCloudService::Stub> stub(new NLPointCloudService::Stub(channel, options));
  return stub;
}

NLPointCloudService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Cluster_(NLPointCloudService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::pointcloud::NLChunkRequest, ::pointcloud::NLClusterResponse>* NLPointCloudService::Stub::ClusterRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::pointcloud::NLChunkRequest, ::pointcloud::NLClusterResponse>::Create(channel_.get(), rpcmethod_Cluster_, context);
}

void NLPointCloudService::Stub::async::Cluster(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::pointcloud::NLChunkRequest,::pointcloud::NLClusterResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::pointcloud::NLChunkRequest,::pointcloud::NLClusterResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Cluster_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::pointcloud::NLChunkRequest, ::pointcloud::NLClusterResponse>* NLPointCloudService::Stub::AsyncClusterRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::pointcloud::NLChunkRequest, ::pointcloud::NLClusterResponse>::Create(channel_.get(), cq, rpcmethod_Cluster_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::pointcloud::NLChunkRequest, ::pointcloud::NLClusterResponse>* NLPointCloudService::Stub::PrepareAsyncClusterRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::pointcloud::NLChunkRequest, ::pointcloud::NLClusterResponse>::Create(channel_.get(), cq, rpcmethod_Cluster_, context, false, nullptr);
}

NLPointCloudService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NLPointCloudService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< NLPointCloudService::Service, ::pointcloud::NLChunkRequest, ::pointcloud::NLClusterResponse>(
          [](NLPointCloudService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::pointcloud::NLClusterResponse,
             ::pointcloud::NLChunkRequest>* stream) {
               return service->Cluster(ctx, stream);
             }, this)));
}

NLPointCloudService::Service::~Service() {
}

::grpc::Status NLPointCloudService::Service::Cluster(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::pointcloud::NLClusterResponse, ::pointcloud::NLChunkRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pointcloud

