// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pointcloud.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pointcloud_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pointcloud_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pointcloud_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pointcloud_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pointcloud_2eproto;
namespace pointcloud {
class NLChunkRequest;
struct NLChunkRequestDefaultTypeInternal;
extern NLChunkRequestDefaultTypeInternal _NLChunkRequest_default_instance_;
class NLClusterResponse;
struct NLClusterResponseDefaultTypeInternal;
extern NLClusterResponseDefaultTypeInternal _NLClusterResponse_default_instance_;
class NLPoint;
struct NLPointDefaultTypeInternal;
extern NLPointDefaultTypeInternal _NLPoint_default_instance_;
}  // namespace pointcloud
PROTOBUF_NAMESPACE_OPEN
template<> ::pointcloud::NLChunkRequest* Arena::CreateMaybeMessage<::pointcloud::NLChunkRequest>(Arena*);
template<> ::pointcloud::NLClusterResponse* Arena::CreateMaybeMessage<::pointcloud::NLClusterResponse>(Arena*);
template<> ::pointcloud::NLPoint* Arena::CreateMaybeMessage<::pointcloud::NLPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pointcloud {

enum NLClusterLabel : int {
  UNKNOWN = 0,
  CORTICAL_SURFACE = 1,
  DURA = 2,
  NLClusterLabel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NLClusterLabel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NLClusterLabel_IsValid(int value);
constexpr NLClusterLabel NLClusterLabel_MIN = UNKNOWN;
constexpr NLClusterLabel NLClusterLabel_MAX = DURA;
constexpr int NLClusterLabel_ARRAYSIZE = NLClusterLabel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NLClusterLabel_descriptor();
template<typename T>
inline const std::string& NLClusterLabel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NLClusterLabel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NLClusterLabel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NLClusterLabel_descriptor(), enum_t_value);
}
inline bool NLClusterLabel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NLClusterLabel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NLClusterLabel>(
    NLClusterLabel_descriptor(), name, value);
}
// ===================================================================

class NLPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pointcloud.NLPoint) */ {
 public:
  inline NLPoint() : NLPoint(nullptr) {}
  ~NLPoint() override;
  explicit constexpr NLPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NLPoint(const NLPoint& from);
  NLPoint(NLPoint&& from) noexcept
    : NLPoint() {
    *this = ::std::move(from);
  }

  inline NLPoint& operator=(const NLPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline NLPoint& operator=(NLPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NLPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const NLPoint* internal_default_instance() {
    return reinterpret_cast<const NLPoint*>(
               &_NLPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NLPoint& a, NLPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(NLPoint* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NLPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NLPoint* New() const final {
    return new NLPoint();
  }

  NLPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NLPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NLPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NLPoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NLPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pointcloud.NLPoint";
  }
  protected:
  explicit NLPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kIdFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // int32 id = 4;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pointcloud.NLPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pointcloud_2eproto;
};
// -------------------------------------------------------------------

class NLChunkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pointcloud.NLChunkRequest) */ {
 public:
  inline NLChunkRequest() : NLChunkRequest(nullptr) {}
  ~NLChunkRequest() override;
  explicit constexpr NLChunkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NLChunkRequest(const NLChunkRequest& from);
  NLChunkRequest(NLChunkRequest&& from) noexcept
    : NLChunkRequest() {
    *this = ::std::move(from);
  }

  inline NLChunkRequest& operator=(const NLChunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NLChunkRequest& operator=(NLChunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NLChunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NLChunkRequest* internal_default_instance() {
    return reinterpret_cast<const NLChunkRequest*>(
               &_NLChunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NLChunkRequest& a, NLChunkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NLChunkRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NLChunkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NLChunkRequest* New() const final {
    return new NLChunkRequest();
  }

  NLChunkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NLChunkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NLChunkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NLChunkRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NLChunkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pointcloud.NLChunkRequest";
  }
  protected:
  explicit NLChunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .pointcloud.NLPoint points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::pointcloud::NLPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pointcloud::NLPoint >*
      mutable_points();
  private:
  const ::pointcloud::NLPoint& _internal_points(int index) const;
  ::pointcloud::NLPoint* _internal_add_points();
  public:
  const ::pointcloud::NLPoint& points(int index) const;
  ::pointcloud::NLPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pointcloud::NLPoint >&
      points() const;

  // @@protoc_insertion_point(class_scope:pointcloud.NLChunkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pointcloud::NLPoint > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pointcloud_2eproto;
};
// -------------------------------------------------------------------

class NLClusterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pointcloud.NLClusterResponse) */ {
 public:
  inline NLClusterResponse() : NLClusterResponse(nullptr) {}
  ~NLClusterResponse() override;
  explicit constexpr NLClusterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NLClusterResponse(const NLClusterResponse& from);
  NLClusterResponse(NLClusterResponse&& from) noexcept
    : NLClusterResponse() {
    *this = ::std::move(from);
  }

  inline NLClusterResponse& operator=(const NLClusterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NLClusterResponse& operator=(NLClusterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NLClusterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NLClusterResponse* internal_default_instance() {
    return reinterpret_cast<const NLClusterResponse*>(
               &_NLClusterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NLClusterResponse& a, NLClusterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NLClusterResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NLClusterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NLClusterResponse* New() const final {
    return new NLClusterResponse();
  }

  NLClusterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NLClusterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NLClusterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NLClusterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NLClusterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pointcloud.NLClusterResponse";
  }
  protected:
  explicit NLClusterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kPointIdFieldNumber = 2,
  };
  // .pointcloud.NLClusterLabel label = 1;
  void clear_label();
  ::pointcloud::NLClusterLabel label() const;
  void set_label(::pointcloud::NLClusterLabel value);
  private:
  ::pointcloud::NLClusterLabel _internal_label() const;
  void _internal_set_label(::pointcloud::NLClusterLabel value);
  public:

  // int32 point_id = 2;
  void clear_point_id();
  ::PROTOBUF_NAMESPACE_ID::int32 point_id() const;
  void set_point_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_point_id() const;
  void _internal_set_point_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pointcloud.NLClusterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int label_;
  ::PROTOBUF_NAMESPACE_ID::int32 point_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pointcloud_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NLPoint

// float x = 1;
inline void NLPoint::clear_x() {
  x_ = 0;
}
inline float NLPoint::_internal_x() const {
  return x_;
}
inline float NLPoint::x() const {
  // @@protoc_insertion_point(field_get:pointcloud.NLPoint.x)
  return _internal_x();
}
inline void NLPoint::_internal_set_x(float value) {
  
  x_ = value;
}
inline void NLPoint::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:pointcloud.NLPoint.x)
}

// float y = 2;
inline void NLPoint::clear_y() {
  y_ = 0;
}
inline float NLPoint::_internal_y() const {
  return y_;
}
inline float NLPoint::y() const {
  // @@protoc_insertion_point(field_get:pointcloud.NLPoint.y)
  return _internal_y();
}
inline void NLPoint::_internal_set_y(float value) {
  
  y_ = value;
}
inline void NLPoint::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:pointcloud.NLPoint.y)
}

// float z = 3;
inline void NLPoint::clear_z() {
  z_ = 0;
}
inline float NLPoint::_internal_z() const {
  return z_;
}
inline float NLPoint::z() const {
  // @@protoc_insertion_point(field_get:pointcloud.NLPoint.z)
  return _internal_z();
}
inline void NLPoint::_internal_set_z(float value) {
  
  z_ = value;
}
inline void NLPoint::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:pointcloud.NLPoint.z)
}

// int32 id = 4;
inline void NLPoint::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NLPoint::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NLPoint::id() const {
  // @@protoc_insertion_point(field_get:pointcloud.NLPoint.id)
  return _internal_id();
}
inline void NLPoint::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void NLPoint::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pointcloud.NLPoint.id)
}

// -------------------------------------------------------------------

// NLChunkRequest

// repeated .pointcloud.NLPoint points = 1;
inline int NLChunkRequest::_internal_points_size() const {
  return points_.size();
}
inline int NLChunkRequest::points_size() const {
  return _internal_points_size();
}
inline void NLChunkRequest::clear_points() {
  points_.Clear();
}
inline ::pointcloud::NLPoint* NLChunkRequest::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:pointcloud.NLChunkRequest.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pointcloud::NLPoint >*
NLChunkRequest::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:pointcloud.NLChunkRequest.points)
  return &points_;
}
inline const ::pointcloud::NLPoint& NLChunkRequest::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::pointcloud::NLPoint& NLChunkRequest::points(int index) const {
  // @@protoc_insertion_point(field_get:pointcloud.NLChunkRequest.points)
  return _internal_points(index);
}
inline ::pointcloud::NLPoint* NLChunkRequest::_internal_add_points() {
  return points_.Add();
}
inline ::pointcloud::NLPoint* NLChunkRequest::add_points() {
  ::pointcloud::NLPoint* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:pointcloud.NLChunkRequest.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pointcloud::NLPoint >&
NLChunkRequest::points() const {
  // @@protoc_insertion_point(field_list:pointcloud.NLChunkRequest.points)
  return points_;
}

// -------------------------------------------------------------------

// NLClusterResponse

// .pointcloud.NLClusterLabel label = 1;
inline void NLClusterResponse::clear_label() {
  label_ = 0;
}
inline ::pointcloud::NLClusterLabel NLClusterResponse::_internal_label() const {
  return static_cast< ::pointcloud::NLClusterLabel >(label_);
}
inline ::pointcloud::NLClusterLabel NLClusterResponse::label() const {
  // @@protoc_insertion_point(field_get:pointcloud.NLClusterResponse.label)
  return _internal_label();
}
inline void NLClusterResponse::_internal_set_label(::pointcloud::NLClusterLabel value) {
  
  label_ = value;
}
inline void NLClusterResponse::set_label(::pointcloud::NLClusterLabel value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:pointcloud.NLClusterResponse.label)
}

// int32 point_id = 2;
inline void NLClusterResponse::clear_point_id() {
  point_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NLClusterResponse::_internal_point_id() const {
  return point_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NLClusterResponse::point_id() const {
  // @@protoc_insertion_point(field_get:pointcloud.NLClusterResponse.point_id)
  return _internal_point_id();
}
inline void NLClusterResponse::_internal_set_point_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  point_id_ = value;
}
inline void NLClusterResponse::set_point_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_point_id(value);
  // @@protoc_insertion_point(field_set:pointcloud.NLClusterResponse.point_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pointcloud

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pointcloud::NLClusterLabel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pointcloud::NLClusterLabel>() {
  return ::pointcloud::NLClusterLabel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pointcloud_2eproto
